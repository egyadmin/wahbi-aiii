# -*- coding: utf-8 -*-
"""
وحدة تحليل المستندات المتقدمة

هذا الملف يحتوي على الفئات المسؤولة عن تحليل المستندات بشكل احترافي
باستخدام تقنيات الذكاء الاصطناعي المتقدمة.
"""

# استيراد المكتبات القياسية
import os
import sys
import logging
import base64
import json
import time
from io import BytesIO
from pathlib import Path
from urllib.parse import urlparse
from tempfile import NamedTemporaryFile

# استيراد مكتبة Streamlit
import streamlit as st

# استيراد المكتبات الإضافية
import requests
from PIL import Image
import pandas as pd
import numpy as np

# تكوين التسجيل
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

try:
    # استيراد مكتبة pdf2image للتعامل مع ملفات PDF
    from pdf2image import convert_from_path
    pdf_conversion_available = True
except ImportError:
    pdf_conversion_available = False
    logger.warning("لم يتم العثور على مكتبة pdf2image. لن يمكن تحويل ملفات PDF إلى صور.")


class TextExtractor:
    """فئة استخراج النصوص من المستندات"""
    
    def __init__(self, config=None):
        """تهيئة مستخرج النصوص"""
        self.config = config or {}
        
    def extract_from_pdf(self, file_path):
        """استخراج النص من ملف PDF"""
        try:
            # محاكاة استخراج النص من PDF
            # في التطبيق الحقيقي، يمكن استخدام مكتبات مثل PyPDF2 أو pdfplumber
            return f"تم استخراج النص من ملف PDF: {file_path}"
        except Exception as e:
            logger.error(f"خطأ في استخراج النص من PDF: {str(e)}")
            return f"حدث خطأ أثناء استخراج النص: {str(e)}"
            
    def extract_from_docx(self, file_path):
        """استخراج النص من ملف DOCX"""
        try:
            # محاكاة استخراج النص من DOCX
            # في التطبيق الحقيقي، يمكن استخدام مكتبة python-docx
            return f"تم استخراج النص من ملف DOCX: {file_path}"
        except Exception as e:
            logger.error(f"خطأ في استخراج النص من DOCX: {str(e)}")
            return f"حدث خطأ أثناء استخراج النص: {str(e)}"
            
    def extract_from_image(self, file_path):
        """استخراج النص من صورة باستخدام OCR"""
        try:
            # محاكاة استخراج النص من صورة
            # في التطبيق الحقيقي، يمكن استخدام مكتبة pytesseract
            return f"تم استخراج النص من صورة: {file_path}"
        except Exception as e:
            logger.error(f"خطأ في استخراج النص من صورة: {str(e)}")
            return f"حدث خطأ أثناء استخراج النص: {str(e)}"
            
    def extract(self, file_path):
        """استخراج النص من ملف بناءً على نوعه"""
        _, ext = os.path.splitext(file_path)
        ext = ext.lower()
        
        if ext == '.pdf':
            return self.extract_from_pdf(file_path)
        elif ext in ('.doc', '.docx'):
            return self.extract_from_docx(file_path)
        elif ext in ('.jpg', '.jpeg', '.png'):
            return self.extract_from_image(file_path)
        else:
            return "نوع ملف غير مدعوم"


class ItemExtractor:
    """فئة استخراج العناصر من المستندات"""
    
    def __init__(self, config=None):
        """تهيئة مستخرج العناصر"""
        self.config = config or {}
        
    def extract_tables(self, document):
        """استخراج الجداول من المستند"""
        try:
            # محاكاة استخراج الجداول
            # في التطبيق الحقيقي، يمكن استخدام مكتبات مثل camelot-py أو tabula-py
            return [
                {
                    "عنوان": "جدول البنود والكميات",
                    "بيانات": [
                        {"البند": "أعمال الحفر", "الكمية": 1000, "الوحدة": "م³", "السعر": 50, "الإجمالي": 50000},
                        {"البند": "أعمال الخرسانة", "الكمية": 500, "الوحدة": "م³", "السعر": 300, "الإجمالي": 150000},
                        {"البند": "أعمال التشطيبات", "الكمية": 2000, "الوحدة": "م²", "السعر": 100, "الإجمالي": 200000}
                    ]
                },
                {
                    "عنوان": "جدول الجدول الزمني",
                    "بيانات": [
                        {"المرحلة": "التصميم", "المدة": "30 يوم", "تاريخ البدء": "2025-04-01", "تاريخ الانتهاء": "2025-04-30"},
                        {"المرحلة": "الإنشاء", "المدة": "180 يوم", "تاريخ البدء": "2025-05-01", "تاريخ الانتهاء": "2025-10-31"},
                        {"المرحلة": "التسليم", "المدة": "30 يوم", "تاريخ البدء": "2025-11-01", "تاريخ الانتهاء": "2025-11-30"}
                    ]
                }
            ]
        except Exception as e:
            logger.error(f"خطأ في استخراج الجداول: {str(e)}")
            return []
                
    def extract_items(self, file_path):
        """استخراج البنود من المستند"""
        try:
            # محاكاة استخراج البنود
            return [
                {"بند": "أعمال الحفر والردم", "قيمة": 250000, "نسبة": "10%"},
                {"بند": "أعمال الخرسانة المسلحة", "قيمة": 750000, "نسبة": "30%"},
                {"بند": "أعمال التشطيبات", "قيمة": 500000, "نسبة": "20%"},
                {"بند": "أعمال الكهرباء", "قيمة": 350000, "نسبة": "14%"},
                {"بند": "أعمال السباكة", "قيمة": 300000, "نسبة": "12%"},
                {"بند": "أعمال التكييف", "قيمة": 350000, "نسبة": "14%"}
            ]
        except Exception as e:
            logger.error(f"خطأ في استخراج البنود: {str(e)}")
            return []
    
    def extract(self, file_path):
        """استخراج جميع العناصر من المستند"""
        return {
            "بنود": self.extract_items(file_path),
            "جداول": self.extract_tables(file_path)
        }


class DocumentParser:
    """فئة تحليل المستندات"""
    
    def __init__(self, config=None):
        """تهيئة محلل المستندات"""
        self.config = config or {}
        self.text_extractor = TextExtractor(config)
        self.item_extractor = ItemExtractor(config)
        
    def parse_contract(self, file_path):
        """تحليل مستند عقد"""
        try:
            # محاكاة تحليل عقد
            return {
                "نوع المستند": "عقد",
                "معلومات العقد": {
                    "رقم العقد": "CT-2025-001",
                    "تاريخ العقد": "2025-03-15",
                    "قيمة العقد": "2,500,000 ريال",
                    "مدة العقد": "12 شهر",
                    "تاريخ البدء": "2025-04-01",
                    "تاريخ الانتهاء": "2026-03-31"
                },
                "أطراف العقد": {
                    "الطرف الأول": "وزارة الإسكان",
                    "الطرف الثاني": "شركة الإنشاءات المتطورة"
                },
                "بنود العقد": [
                    "يلتزم الطرف الثاني بتنفيذ المشروع وفقاً للمواصفات والشروط المرفقة",
                    "مدة تنفيذ المشروع 12 شهراً من تاريخ استلام الموقع",
                    "قيمة العقد 2,500,000 ريال شاملة جميع الضرائب والرسوم",
                    "يتم الدفع على دفعات شهرية حسب نسبة الإنجاز",
                    "غرامة التأخير 1% من قيمة العقد عن كل أسبوع تأخير بحد أقصى 10%"
                ],
                "المرفقات": [
                    "جدول الكميات",
                    "المواصفات الفنية",
                    "الجدول الزمني",
                    "الضمانات والتأمينات"
                ],
                "درجة الثقة": "95%"
            }
        except Exception as e:
            logger.error(f"خطأ في تحليل العقد: {str(e)}")
            return {"error": f"حدث خطأ أثناء تحليل العقد: {str(e)}"}
    
    def parse_tender(self, file_path):
        """تحليل مستند مناقصة"""
        try:
            # محاكاة تحليل مناقصة
            return {
                "نوع المستند": "مناقصة",
                "معلومات المناقصة": {
                    "رقم المناقصة": "T-2025-002",
                    "اسم المشروع": "إنشاء مبنى إداري",
                    "الجهة المالكة": "وزارة المالية",
                    "تاريخ الطرح": "2025-03-01",
                    "تاريخ الإقفال": "2025-04-15",
                    "القيمة التقديرية": "3,000,000 ريال"
                },
                "شروط المناقصة": [
                    "تصنيف المقاول: الدرجة الأولى في مجال المباني",
                    "خبرة سابقة: 5 مشاريع مماثلة خلال الـ 10 سنوات الماضية",
                    "الضمان الابتدائي: 2% من قيمة العطاء",
                    "الضمان النهائي: 5% من قيمة العقد",
                    "مدة تنفيذ المشروع: 18 شهراً"
                ],
                "المستندات المطلوبة": [
                    "شهادة التصنيف",
                    "السجل التجاري",
                    "شهادة الزكاة والدخل",
                    "شهادة التأمينات الاجتماعية",
                    "قائمة المشاريع المماثلة"
                ],
                "معايير التقييم": [
                    {"المعيار": "السعر", "الوزن": "50%"},
                    {"المعيار": "الخبرة الفنية", "الوزن": "25%"},
                    {"المعيار": "الجدول الزمني", "الوزن": "15%"},
                    {"المعيار": "فريق العمل", "الوزن": "10%"}
                ],
                "درجة الثقة": "92%"
            }
        except Exception as e:
            logger.error(f"خطأ في تحليل المناقصة: {str(e)}")
            return {"error": f"حدث خطأ أثناء تحليل المناقصة: {str(e)}"}
    
    def parse_specifications(self, file_path):
        """تحليل كراسة الشروط والمواصفات"""
        try:
            # محاكاة تحليل كراسة الشروط والمواصفات
            return {
                "نوع المستند": "كراسة شروط ومواصفات",
                "معلومات المشروع": {
                    "اسم المشروع": "إنشاء مبنى إداري",
                    "الموقع": "الرياض - حي العليا",
                    "المساحة": "5000 متر مربع",
                    "عدد الطوابق": "5 طوابق"
                },
                "المواصفات الفنية": {
                    "الهيكل الإنشائي": "خرسانة مسلحة",
                    "الواجهات": "زجاج عاكس وحجر طبيعي",
                    "التشطيبات الداخلية": "رخام للأرضيات، جبس للأسقف، دهانات عالية الجودة للجدران",
                    "أنظمة الكهرباء": "نظام إنارة LED موفر للطاقة، نظام تحكم ذكي",
                    "أنظمة التكييف": "نظام تكييف مركزي مع تحكم منفصل لكل منطقة",
                    "أنظمة السلامة": "نظام إنذار وإطفاء حريق آلي، كاميرات مراقبة، نظام تحكم في الدخول"
                },
                "الشروط العامة": [
                    "الالتزام بكود البناء السعودي",
                    "الالتزام بمتطلبات الدفاع المدني",
                    "الالتزام بمتطلبات الاستدامة وكفاءة الطاقة",
                    "تقديم مخططات تنفيذية معتمدة قبل البدء في التنفيذ",
                    "تقديم عينات للمواد للاعتماد قبل التوريد"
                ],
                "المرفقات": [
                    "المخططات المعمارية",
                    "المخططات الإنشائية",
                    "مخططات الكهرباء",
                    "مخططات التكييف",
                    "مخططات السباكة",
                    "جدول الكميات"
                ],
                "درجة الثقة": "90%"
            }
        except Exception as e:
            logger.error(f"خطأ في تحليل كراسة الشروط والمواصفات: {str(e)}")
            return {"error": f"حدث خطأ أثناء تحليل كراسة الشروط والمواصفات: {str(e)}"}
    
    def parse_dwg(self, file_path):
        """تحليل ملف DWG"""
        try:
            # محاكاة تحليل ملف DWG
            return {
                "نوع المستند": "ملف DWG",
                "معلومات الملف": {
                    "اسم الملف": os.path.basename(file_path),
                    "حجم الملف": f"{os.path.getsize(file_path) / (1024*1024):.2f} ميجابايت",
                    "تاريخ التعديل": time.ctime(os.path.getmtime(file_path))
                },
                "محتويات الملف": {
                    "عدد الطبقات": 15,
                    "عدد الكائنات": 1250,
                    "أبعاد الرسم": "50م × 30م"
                },
                "تحليل المساحات": {
                    "المساحة الإجمالية": "4,500 م²",
                    "مساحة البناء": "3,200 م²",
                    "مساحة الخدمات": "800 م²",
                    "مساحة الممرات": "500 م²"
                },
                "تحليل العناصر": {
                    "عدد الغرف": 25,
                    "عدد الأبواب": 40,
                    "عدد النوافذ": 30,
                    "عدد الأعمدة": 20
                },
                "ملاحظات": [
                    "تصميم يتوافق مع متطلبات كود البناء السعودي",
                    "توزيع جيد للمساحات",
                    "تصميم يراعي متطلبات ذوي الاحتياجات الخاصة",
                    "تصميم يراعي متطلبات السلامة والإخلاء"
                ],
                "درجة الثقة": "85%"
            }
        except Exception as e:
            logger.error(f"خطأ في تحليل ملف DWG: {str(e)}")
            return {"error": f"حدث خطأ أثناء تحليل ملف DWG: {str(e)}"}
    
    def parse(self, file_path):
        """تحليل المستند بناءً على نوعه"""
        try:
            _, ext = os.path.splitext(file_path)
            ext = ext.lower()
            
            # تحديد نوع المستند بناءً على محتواه (محاكاة)
            file_name = os.path.basename(file_path).lower()
            
            if ext == '.dwg':
                return self.parse_dwg(file_path)
            elif 'contract' in file_name or 'عقد' in file_name:
                return self.parse_contract(file_path)
            elif 'tender' in file_name or 'مناقصة' in file_name:
                return self.parse_tender(file_path)
            elif 'spec' in file_name or 'شروط' in file_name or 'مواصفات' in file_name:
                return self.parse_specifications(file_path)
            else:
                # تحليل عام للمستند
                return {
                    "نوع المستند": "مستند عام",
                    "معلومات الملف": {
                        "اسم الملف": os.path.basename(file_path),
                        "حجم الملف": f"{os.path.getsize(file_path) / (1024*1024):.2f} ميجابايت",
                        "تاريخ التعديل": time.ctime(os.path.getmtime(file_path))
                    },
                    "محتوى المستند": {
                        "نص": self.text_extractor.extract(file_path),
                        "عناصر": self.item_extractor.extract(file_path)
                    },
                    "درجة الثقة": "75%"
                }
        except Exception as e:
            logger.error(f"خطأ في تحليل المستند: {str(e)}")
            return {"error": f"حدث خطأ أثناء تحليل المستند: {str(e)}"}


class AIDocumentAnalyzer:
    """فئة تحليل المستندات باستخدام الذكاء الاصطناعي"""
    
    def __init__(self):
        """تهيئة محلل المستندات الذكي"""
        self.document_parser = DocumentParser()
        self.api_keys = {}
        
    def set_api_key(self, provider, key):
        """تعيين مفتاح API لمزود خدمة الذكاء الاصطناعي"""
        self.api_keys[provider] = key
        
    def get_api_key(self, provider):
        """الحصول على مفتاح API لمزود خدمة الذكاء الاصطناعي"""
        return self.api_keys.get(provider)
    
    def analyze_document(self, file_path, provider="local"):
        """تحليل المستند باستخدام الذكاء الاصطناعي"""
        try:
            # تحليل محلي للمستند
            local_analysis = self.document_parser.parse(file_path)
            
            if provider == "local":
                return local_analysis
            
            # تحليل باستخدام خدمات الذكاء الاصطناعي السحابية
            if provider == "openai":
                # محاكاة تحليل باستخدام OpenAI
                enhanced_analysis = self._enhance_with_openai(local_analysis)
                return enhanced_analysis
            elif provider == "claude":
                # محاكاة تحليل باستخدام Claude
                enhanced_analysis = self._enhance_with_claude(local_analysis)
                return enhanced_analysis
            else:
                return local_analysis
        except Exception as e:
            logger.error(f"خطأ في تحليل المستند: {str(e)}")
            return {"error": f"حدث خطأ أثناء تحليل المستند: {str(e)}"}
    
    def _enhance_with_openai(self, analysis):
        """تحسين التحليل باستخدام OpenAI"""
        # محاكاة تحسين التحليل باستخدام OpenAI
        analysis["مصدر التحليل"] = "OpenAI"
        analysis["درجة الثقة"] = "98%"
        
        # إضافة تحليل المخاطر
        if "تحليل المخاطر" not in analysis:
            analysis["تحليل المخاطر"] = [
                {"المخاطرة": "تأخر التوريدات", "الاحتمالية": "متوسطة", "التأثير": "عالي", "استراتيجية التخفيف": "وضع خطة توريدات بديلة"},
                {"المخاطرة": "زيادة أسعار المواد", "الاحتمالية": "عالية", "التأثير": "عالي", "استراتيجية التخفيف": "تثبيت أسعار المواد الرئيسية مع الموردين"},
                {"المخاطرة": "نقص العمالة الماهرة", "الاحتمالية": "متوسطة", "التأثير": "متوسط", "استراتيجية التخفيف": "التعاقد المسبق مع مقاولي الباطن"},
                {"المخاطرة": "تغيير نطاق العمل", "الاحتمالية": "منخفضة", "التأثير": "عالي", "استراتيجية التخفيف": "توثيق نطاق العمل بدقة وإدارة التغيير"}
            ]
        
        # إضافة توصيات
        if "التوصيات" not in analysis:
            analysis["التوصيات"] = [
                "مراجعة بنود العقد بدقة قبل التوقيع",
                "التأكد من وضوح نطاق العمل وعدم وجود غموض",
                "التحقق من توافق المواصفات الفنية مع المعايير المحلية",
                "وضع خطة إدارة مخاطر شاملة للمشروع",
                "تخصيص احتياطي للطوارئ بنسبة 10-15% من قيمة المشروع"
            ]
        
        return analysis
    
    def _enhance_with_claude(self, analysis):
        """تحسين التحليل باستخدام Claude"""
        # محاكاة تحسين التحليل باستخدام Claude
        analysis["مصدر التحليل"] = "Claude"
        analysis["درجة الثقة"] = "97%"
        
        # إضافة تحليل الفرص
        if "تحليل الفرص" not in analysis:
            analysis["تحليل الفرص"] = [
                {"الفرصة": "تحسين التصميم", "الفائدة": "تقليل التكلفة بنسبة 5-10%", "المتطلبات": "مراجعة هندسية شاملة"},
                {"الفرصة": "استخدام مواد بديلة", "الفائدة": "تقليل وقت التنفيذ", "المتطلبات": "اعتماد المواصفات الجديدة"},
                {"الفرصة": "زيادة المحتوى المحلي", "الفائدة": "تحسين التصنيف في برنامج القيمة المضافة", "المتطلبات": "تحديد الموردين المحليين"},
                {"الفرصة": "تطبيق تقنيات البناء الحديثة", "الفائدة": "تحسين الجودة وتقليل الهدر", "المتطلبات": "تدريب فريق العمل"}
            ]
        
        # إضافة ملخص تنفيذي
        if "الملخص التنفيذي" not in analysis:
            analysis["الملخص التنفيذي"] = """
            يتضمن هذا المستند تفاصيل مشروع إنشاء مبنى إداري بمساحة إجمالية 5000 متر مربع. 
            المشروع يتكون من 5 طوابق ويتضمن مواصفات فنية عالية الجودة. 
            تقدر تكلفة المشروع بحوالي 3 مليون ريال ومدة التنفيذ 18 شهراً.
            يتميز المشروع بتصميم يراعي متطلبات الاستدامة وكفاءة الطاقة.
            تم تحديد عدة مخاطر محتملة للمشروع مع استراتيجيات التخفيف المناسبة.
            كما تم تحديد عدة فرص لتحسين المشروع من حيث التكلفة والجودة ووقت التنفيذ.
            """
        
        return analysis
    
    def analyze_dwg(self, file_path, provider="local"):
        """تحليل ملف DWG باستخدام الذكاء الاصطناعي"""
        try:
            # تحليل محلي لملف DWG
            local_analysis = self.document_parser.parse_dwg(file_path)
            
            if provider == "local":
                return local_analysis
            
            # تحسين التحليل باستخدام خدمات الذكاء الاصطناعي
            if provider == "openai" or provider == "claude":
                # إضافة تحليل متقدم
                local_analysis["تحليل متقدم"] = {
                    "تقييم التصميم": "جيد جداً",
                    "كفاءة استخدام المساحة": "90%",
                    "توافق مع المعايير": "متوافق مع كود البناء السعودي",
                    "اقتراحات التحسين": [
                        "تحسين توزيع المساحات لزيادة كفاءة استخدام المساحة",
                        "تحسين تصميم الممرات لتسهيل الحركة",
                        "إضافة عناصر تصميم مستدامة لتقليل استهلاك الطاقة",
                        "تحسين تصميم الواجهات لزيادة الإضاءة الطبيعية"
                    ]
                }
                
                # إضافة تقدير التكلفة
                local_analysis["تقدير التكلفة"] = {
                    "التكلفة الإجمالية التقديرية": "3,200,000 ريال",
                    "تكلفة المتر المربع": "800 ريال",
                    "توزيع التكلفة": [
                        {"البند": "الهيكل الإنشائي", "النسبة": "35%", "القيمة": "1,120,000 ريال"},
                        {"البند": "التشطيبات", "النسبة": "25%", "القيمة": "800,000 ريال"},
                        {"البند": "الأنظمة الكهربائية", "النسبة": "15%", "القيمة": "480,000 ريال"},
                        {"البند": "الأنظمة الميكانيكية", "النسبة": "15%", "القيمة": "480,000 ريال"},
                        {"البند": "الأعمال الخارجية", "النسبة": "10%", "القيمة": "320,000 ريال"}
                    ]
                }
                
                # إضافة الجدول الزمني
                local_analysis["الجدول الزمني التقديري"] = {
                    "المدة الإجمالية": "18 شهر",
                    "المراحل": [
                        {"المرحلة": "أعمال الحفر والأساسات", "المدة": "3 أشهر", "النسبة": "15%"},
                        {"المرحلة": "الهيكل الإنشائي", "المدة": "6 أشهر", "النسبة": "35%"},
                        {"المرحلة": "التشطيبات الداخلية", "المدة": "5 أشهر", "النسبة": "25%"},
                        {"المرحلة": "الأنظمة الكهربائية والميكانيكية", "المدة": "3 أشهر", "النسبة": "15%"},
                        {"المرحلة": "الأعمال الخارجية والتسليم", "المدة": "1 شهر", "النسبة": "10%"}
                    ]
                }
                
                local_analysis["مصدر التحليل"] = provider.capitalize()
                local_analysis["درجة الثقة"] = "95%"
            
            return local_analysis
        except Exception as e:
            logger.error(f"خطأ في تحليل ملف DWG: {str(e)}")
            return {"error": f"حدث خطأ أثناء تحليل ملف DWG: {str(e)}"}
